/*!
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the License. A copy of
 * the License is located at
 *     http://aws.amazon.com/asl/
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
import * as React from 'react';
import * as PropTypes from 'prop-types';
import AWSAppSyncClient from 'aws-appsync';
import { RehydratedState } from './index';
export interface RehydrateProps {
    rehydrated: boolean;
    children: React.ReactNode;
}
export interface RehydratedProps {
    render?: ((props: {
        rehydrated: boolean;
    }) => React.ReactNode);
    children?: React.ReactNode;
    loading?: React.ComponentType<any>;
}
export default class Rehydrated extends React.Component<RehydratedProps, RehydratedState> {
    static contextTypes: {
        client: PropTypes.Validator<AWSAppSyncClient<import("apollo-cache-inmemory/lib/types").NormalizedCacheObject>>;
    };
    static propTypes: {
        render: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        loading: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    constructor(props: any, context: any);
    componentWillMount(): Promise<void>;
    render(): {};
}
